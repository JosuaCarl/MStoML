# Accounting
sacct --format="User,JobID,Start,Timelimit,End,CPUTime,MaxRSS,Reserved,ReqMem,MaxVMSize,NCPUS,Priority,State,TresUsageInTot"

# Open run (8 h)
srun -t 08:00:00 --cpus-per-task=2 --ntasks=1 --mem-per-cpu=8G --pty bash -i

# Check GPUs
sbatch --partition gpu-a30 --gres gpu:1 --output ../../runs/slurm_check_gpus.out check_gpus.py -b "tensorflow"

# vae
sbatch --partition cpu1 --output ../../runs/VAE/training/slurm_test.out vae.py -d "../../runs/FIA/Com8_grown_together/oms" -r "../../runs/VAE/training" -b "tensorflow" -c "cpu" -n "test" -e 10 -s "new" "train" "test" "plot" -v 2

# VAE_smac
sbatch --partition gpu-a30 --gres gpu:1  --output ../../runs/VAE/hyperparameter_optimization/slurm_test.out VAE_smac.py -d "../../runs/FIA/Com8_grown_together/oms" -r "../../runs/VAE/hyperparameter_optimization" -b "tensorflow" -c "gpu" -n "test" -v 1

# smac_runhistories
sbatch --output ../../runs/VAE/hyperparameter_optimization/slurm_test.out smac_runhistories.py -i "../../runs/VAE/hyperparameter_optimization" -o "../../runs/VAE/hyperparameter_optimization" -b "pytorch" -c "gpu" -v 1

# Git
git_auto -r ../.. -m "Quick safe"


# FIX WRONG CUDA version
mamba install -c conda-forge libstdcxx-ng
export LD_LIBRARY_PATH=$WORK/.conda/envs/VAE/lib:$LD_LIBRARY_PATH

#check
strings /mnt/lustre/groups/link/linca945/.conda/envs/VAE/lib/libstdc++.so.6 | grep GLIBCXX

#revert 
export LD_LIBRARY_PATH=""

# TensorRT
pip install nvidia-pyindex
pip install --pre --upgrade tensorrt
pip install --upgrade nvidia-tensorrt

# cuda-nvcc
pip install nvidia-cuda-nvcc-cu12



# HPS
## cosine
hyperparameters = [
        Constant(       "original_dim",             X.shape[1]),
        Float(          "input_dropout",            (0.0, 0.5), default=0.25),
        Integer(        "intermediate_layers",      (1, 8), default=2),
        Integer(        "intermediate_dimension",   (10, 200), log=True, default=200),
        Categorical(    "intermediate_activation",  ["relu", "silu", "leaky_relu", "mish", "selu"], default="relu"),
        Integer(        "latent_dimension",         (10, 100), log=False, default=100),
        Categorical(    "solver",                   ["nadam", "adamw"], default="adamw"),
        Float(          "learning_rate",            (1e-4, 1e-2), log=True, default=1e-3),
        Categorical(    "tied",                     [0, 1], default=1),
        Float(          "kld_weight",               (1e-3, 1e2), log=True, default=1.0),
        Float(          "stdev_noise",              (1e-12, 1e-4), log=True, default=1e-10),
        Constant(       "reconstruction_loss_function", "cosine"),
    ]

hyperparameters = [
        Constant(       "original_dim",             X.shape[1]),
        Constant(       "stdev_noise",              1e-12),
        Constant(       "input_dropout",            0.15),
        Constant(       "intermediate_layers",      5),
        Integer(        "intermediate_dimension",   (10, 2000), log=True, default=1000),
        Constant(       "intermediate_activation",  "leaky_relu"),
        Integer(        "latent_dimension",         (10, 800), log=False, default=100),
        Constant(       "solver",                   "nadam"),
        Constant(       "learning_rate",            5e-4),
        Constant(       "tied",                     0),
        Float(          "kld_weight",               (1e-3, 1e3), log=True, default=1.0),
        Constant(       "reconstruction_loss_function", "cosine"),
    ]

config_space = ConfigurationSpace(
                {
                'input_dropout': 0.30881774853793853,
                'intermediate_activation': 'leaky_relu',
                'intermediate_dimension': 92,
                'intermediate_layers': 7,
                'kld_weight': 0.1319608007378437,
                'latent_dimension': 66,
                'learning_rate': 0.0075200853409827595,
                'original_dim': 825000,
                'reconstruction_loss_function': 'cosine',
                'solver': 'nadam',
                'stdev_noise': 2.8439343089406606e-07,
                'tied': 0,
                }
            )

## MAE
hyperparameters = [
        Constant(       "original_dim",             X.shape[1]),
        Constant(       "stdev_noise",              1e-12),
        Constant(       "input_dropout",            0.4),
        Constant(       "intermediate_layers",      5),
        Integer(        "intermediate_dimension",   (100, 2000), log=True, default=1000),
        Constant(       "intermediate_activation",  "silu"),
        Integer(        "latent_dimension",         (10, 800), log=False, default=100),
        Constant(       "solver",                   "nadam"),
        Constant(       "learning_rate",            1e-4),
        Constant(       "tied",                     0),
        Float(          "kld_weight",               (1e-3, 1e3), log=True, default=1.0),
        Constant(       "reconstruction_loss_function", "mae"),
    ]

config_space = ConfigurationSpace(
                {
  'input_dropout': 0.4882297325066979,
  'intermediate_activation': 'leaky_relu',
  'intermediate_dimension': 1774,
  'intermediate_layers': 6,
  'kld_weight': 0.32504784226357325,
  'latent_dimension': 461,
  'learning_rate': 0.0001575735922143918,
  'original_dim': 825000,
  'reconstruction_loss_function': 'mae',
  'solver': 'nadam',
  'stdev_noise': 2.543977003514766e-07,
  'tied': 0,
}
            )

## COS + MAE
config_space = ConfigurationSpace(
    {
    'input_dropout': 0.24130930985298438,
    'intermediate_activation': 'mish',
    'intermediate_dimension': 72,
    'intermediate_layers': 3,
    'kld_weight': 0.13177304287845082,
    'latent_dimension': 64,
    'learning_rate': 0.007446738964548081,
    'original_dim': 825000,
    'reconstruction_loss_function': 'mae+cosine',
    'solver': 'nadam',
    'stdev_noise': 5.860634367432764e-10,
    'tied': 0,
    }
)


## Spectral Entropy
config_space = ConfigurationSpace(
    {
    'input_dropout': 0.4404990303930656,
    'intermediate_activation': 'mish',
    'intermediate_dimension': 378,
    'intermediate_layers': 7,
    'kld_weight': 0.11432265386769921,
    'latent_dimension': 180,
    'learning_rate': 0.00017594452799251045,
    'original_dim': 825000,
    'reconstruction_loss_function': 'spectral_entropy',
    'solver': 'nadam',
    'stdev_noise': 4.464573896496255e-09,
    'tied': 0,
    }
)