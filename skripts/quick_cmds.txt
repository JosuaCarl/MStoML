# Accounting
sacct --format="User,JobID,Start,Timelimit,End,CPUTime,MaxRSS,Reserved,ReqMem,MaxVMSize,NCPUS,Priority,State,TresUsageInTot"

# Open run (8 h)
srun -t 08:00:00 --cpus-per-task=2 --ntasks=1 --mem-per-cpu=8G --pty bash -i

# Check GPUs
sbatch --partition gpu-a30 --gres gpu:1 --output ../../runs/slurm_check_gpus.out check_gpus.py -b "tensorflow"

# vae
sbatch --partition cpu1 --output ../../runs/VAE/training/slurm_test.out vae.py -d "../../runs/FIA/Com8_grown_together/oms" -r "../../runs/VAE/training" -b "tensorflow" -c "cpu" -n "test" -e 10 -s "new" "train" "test" "plot" -v 2

# VAE_smac
sbatch --partition gpu-a30 --gres gpu:1  --output ../../runs/VAE/hyperparameter_optimization/slurm_test.out VAE_smac.py -d "../../runs/FIA/Com8_grown_together/oms" -r "../../runs/VAE/hyperparameter_optimization" -b "tensorflow" -c "gpu" -n "test" -v 1

# smac_runhistories
sbatch --output ../../runs/VAE/hyperparameter_optimization/slurm_test.out smac_runhistories.py -i "../../runs/VAE/hyperparameter_optimization" -o "../../runs/VAE/hyperparameter_optimization" -b "pytorch" -c "gpu" -v 1

# Git
git_auto -r ../.. -m "Quick safe"


# FIX WRONG CUDA version
mamba install -c conda-forge libstdcxx-ng
export LD_LIBRARY_PATH=$WORK/.conda/envs/VAE/lib:$LD_LIBRARY_PATH

#check
strings /mnt/lustre/groups/link/linca945/.conda/envs/VAE/lib/libstdc++.so.6 | grep GLIBCXX

#revert 
export LD_LIBRARY_PATH=""

# TensorRT
pip install nvidia-pyindex
pip install --pre --upgrade tensorrt
pip install --upgrade nvidia-tensorrt

# cuda-nvcc
pip install nvidia-cuda-nvcc-cu12



# HPS
## cosine
hyperparameters = [
        Constant(       "original_dim",             X.shape[1]),
        Float(          "input_dropout",            (0.0, 0.5), default=0.25),
        Integer(        "intermediate_layers",      (1, 8), default=2),
        Integer(        "intermediate_dimension",   (10, 200), log=True, default=200),
        Categorical(    "intermediate_activation",  ["relu", "silu", "leaky_relu", "mish", "selu"], default="relu"),
        Integer(        "latent_dimension",         (10, 100), log=False, default=100),
        Categorical(    "solver",                   ["nadam", "adamw"], default="adamw"),
        Float(          "learning_rate",            (1e-4, 1e-2), log=True, default=1e-3),
        Categorical(    "tied",                     [0, 1], default=1),
        Float(          "kld_weight",               (1e-3, 1e2), log=True, default=1.0),
        Float(          "stdev_noise",              (1e-12, 1e-4), log=True, default=1e-10),
        Constant(       "reconstruction_loss_function", "cosine"),
    ]

hyperparameters = [
        Constant(       "original_dim",             X.shape[1]),
        Constant(       "stdev_noise",              1e-12),
        Constant(       "input_dropout",            0.15),
        Constant(       "intermediate_layers",      5),
        Integer(        "intermediate_dimension",   (10, 2000), log=True, default=1000),
        Constant(       "intermediate_activation",  "leaky_relu"),
        Integer(        "latent_dimension",         (10, 800), log=False, default=100),
        Constant(       "solver",                   "nadam"),
        Constant(       "learning_rate",            5e-4),
        Constant(       "tied",                     0),
        Float(          "kld_weight",               (1e-3, 1e3), log=True, default=1.0),
        Constant(       "reconstruction_loss_function", "cosine"),
    ]

## MAE
hyperparameters = [
        Constant(       "original_dim",             X.shape[1]),
        Constant(       "stdev_noise",              1e-12),
        Constant(       "input_dropout",            0.4),
        Constant(       "intermediate_layers",      5),
        Integer(        "intermediate_dimension",   (100, 2000), log=True, default=1000),
        Constant(       "intermediate_activation",  "silu"),
        Integer(        "latent_dimension",         (10, 800), log=False, default=100),
        Constant(       "solver",                   "nadam"),
        Constant(       "learning_rate",            1e-4),
        Constant(       "tied",                     0),
        Float(          "kld_weight",               (1e-3, 1e3), log=True, default=1.0),
        Constant(       "reconstruction_loss_function", "mae"),
    ]